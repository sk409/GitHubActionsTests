name: CI
on:
  workflow_dispatch:
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.setup.outputs.result }}
    steps:
      - name: Set Up
        id: setup
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const list = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ github.ref }}',
              check_name: 'review',
              filter: 'latest'
            });
            const checkRunID = list.data.check_runs[0].id;
            github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: checkRunID,
              status: 'in_progress'
            })
            return JSON.stringify({
              checkRunID: checkRunID
            })
  lint:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Lint
        run: |
          brew install swift-format
          git fetch origin main
          swift-format lint -s $(git diff --name-only origin/main..HEAD | grep .swift$)
  ut:
    runs-on: macos-14
    outputs:
      result: ${{ steps.ut.outputs.result }}
    strategy:
      fail-fast: false
      matrix:
        # iOS: ["15.0", "16.0", "17.5"]
        iOS: ["15.0"]
    steps:
      - name: Delete Xcodes
        run: |
          rm -rf /Applications/Xcode_16.1_beta.app \
                 /Applications/Xcode_16_beta_6.app
      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer
      - name: Cache simulators
        id: cache-simulators
        uses: actions/cache@v4
        path: ~/iOS\ ${{ matrix.iOS }}.simruntime.zip
        key: ${{ runner.os }}-iOS-simulator-${{ matrix.iOS }}
      - name: Unzip simulators
        if: ${{ matrix.iOS != '17.5' }} && steps.cache-simulators.outputs.cache-hit == 'true'
        run: |
          sudo mkdir -p /Library/Developer/CoreSimulator/Profiles/Runtimes
          sudo unzip ~/iOS\ ${{ matrix.iOS }}.simruntime.zip -d /Library/Developer/CoreSimulator/Profiles/Runtimes
      - name: Install simulators
        if: ${{ matrix.iOS != '17.5' }} && steps.cache-simulators.outputs.cache-hit == 'false'
        run: sudo xcodes runtimes install --keep-archive "iOS ${{ matrix.iOS }}"
        with:
      - name: Cache packages
        uses: actions/cache@v4
        with:
          path: ~/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('GitHubActions.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      - name: Checkout
        uses: actions/checkout@v4
      - name: UT
        id: ut
        continue-on-error: true
        run: |
          if [ ${{ matrix.iOS }} = "15.0" ]; then
            device="iPhone 13 Pro"
          else
            device="iPhone 14 Pro"
          fi
          xcodebuild -workspace GitHubActions.xcworkspace \
                     -scheme GitHubActionsTests \
                     -destination "platform=iOS Simulator,name=$device,OS=${{ matrix.iOS }}" \
                     -resultBundlePath ~/Lancers.xcresult \
                     -clonedSourcePackagesDirPath ~/SourcePackages \
                     -skipMacroValidation \
                     test
          if [ $? -eq 0 ]; then
            result="success"
          else
            result="failure"
          fi
          echo "result=$result" >> "$GITHUB_OUTPUT"
      - name: Upload xcresult
        uses: actions/upload-artifact@v4
        with:
          name: Lancers-${{ github.run_number }}.xcresult
          path: ~/Lancers.xcresult
      - name: Zip simulators
        working-directory: /Library/Developer/CoreSimulator/Profiles/Runtimes
        run: zip -r ~/iOS\ ${{ matrix.iOS }}.simruntime.zip iOS\ ${{ matrix.iOS }}.simruntime
  completed:
    runs-on: ubuntu-latest
    if: always()
    needs: [setup, lint, ut]
    steps:
      - name: Completed
        uses: actions/github-script@v7
        with:
          script: |
            const setup = JSON.parse('${{ needs.setup.outputs.result }}')
            github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: setup.checkRunID,
              status: 'completed',
              conclusion: ${{ needs.lint.result == 'success' }} && ${{ needs.ut.outputs.result == 'success' }} ? 'success' : 'failure'
            })
    