name: CI
on:
  issue_comment:
    types: [created]
  # pull_request:
  #   types: [opened, synchronize]
jobs:
  setup:
    if: contains(github.event.comment.html_url, '/pull/') && 
        github.event.comment.body == '/review'
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.pr.outputs.branch }}
      check_run_id: ${{ steps.check-run.outputs.result }}
    steps:
      - name: Notify
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              // issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "自動レビューを開始しました。\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            })
      - name: Fetch branch
        id: pr
        run: |
          branch=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ github.event.issue.pull_request.url }} | jq -r '.head.ref')
          echo "branch=$branch" >> $GITHUB_OUTPUT
        # echo "branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
      - name: Fetch check run id
        id: check-run
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const list = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ steps.pr.outputs.branch }}',
              check_name: 'review',
              filter: 'latest'
            });
            const checkRunID = list.data.check_runs[0].id;
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: checkRunID,
              status: 'in_progress'
            })
            return checkRunID
  lint:
    runs-on: macos-14
    needs: [setup]
    steps:
      - name: Install swift-format
        run: brew install swift-format
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.branch }}
      - name: Fetch base branch
        id: base
        run: |
          ref=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ github.event.issue.pull_request.url }} | jq -r '.base.ref')
          echo "ref=$ref" >> $GITHUB_OUTPUT
          git fetch origin $ref
      - name: Lint
        run: swift-format lint -s $(git diff --name-only origin/${{ steps.base.outputs.ref }}..${{ needs.setup.outputs.branch }} | grep .swift$)
  ut:
    runs-on: macos-14
    needs: [setup]
    env:
      result_file_name: result.txt
      runtimes_directory: /Library/Developer/CoreSimulator/Profiles/Runtimes
      simruntime_name: iOS\ 15.0.simruntime
      xcresult_path: ~/Lancers.xcresult
    strategy:
      fail-fast: false
      matrix:
        os: ["15.0", "16.0", "17.5", "macOS"]
    steps:
      - run: date
      # - name: Delete Xcodes
      #   # iOS Simulatorのインストール/キャッシュに使用するストレージを確保するため不要なXcodeを削除する。
      #   run: |
      #     rm -rf /Applications/Xcode_16.1_beta.app \
      #            /Applications/Xcode_16_beta_6.app \
      #            /Applications/Xcode_15.4.app \
      #            /Applications/Xcode_15.2.app \
      #            /Applications/Xcode_15.1.app \
      # - name: Select Xcode
      #   run: sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer
      # - name: Cache simulators
      #   # simruntime.zipは5GB以上あるが、GitHubActionsのキャッシュの上限が10GBである。
      #   # 上記に加えて、iOS 16.0のsimruntimesのダウンロード/インストールはキャッシュから取得するよりも高速であるため、
      #   # iOS 15.0のみキャッシュする。
      #   if: ${{ matrix.os == '15.0' }}
      #   id: simulators
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/${{ env.simruntime_name }}.zip
      #     key: iOS-15.0-simulator
      #     save-always: true
      # - name: Unzip simulators
      #   if: ${{ matrix.os == '15.0' && steps.simulators.outputs.cache-hit == 'true' }}
      #   run: |
      #     sudo mkdir -p ${{ env.runtimes_directory }}
      #     sudo unzip ~/${{ env.simruntime_name }}.zip -d ${{ env.runtimes_directory }}
      # - name: Install simulators
      #   if: ${{ (matrix.os == '15.0' || matrix.os == '16.0') && steps.simulators.outputs.cache-hit != 'true' }}
      #   run: sudo xcodes runtimes install --keep-archive "iOS ${{ matrix.os }}"
      # - name: Zip simulators
      #   if: ${{ matrix.os == '15.0' && steps.simulators.outputs.cache-hit != 'true' }}
      #   working-directory: ${{ env.runtimes_directory }}
      #   run: zip -r ~/${{ env.simruntime_name }}.zip ${{ env.simruntime_name }}
      # - name: Checkout
      #   uses: actions/checkout@v4
      #   with:
      #     ref: ${{ needs.setup.outputs.branch }}
      # - name: Cache packages
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/SourcePackages
      #     key: SPM-${{ hashFiles('GitHubActions.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
      # - name: UT
      #   id: ut
      #   continue-on-error: true
      #   run: |
      #     if [ ${{ matrix.os }} = "15.0" ]; then
      #       device="iPhone 13 Pro"
      #     else
      #       device="iPhone 14 Pro Max"
      #     fi
      #     if [ ${{ matrix.os }} = "macOS" ]; then
      #       scheme=MacroTests
      #       destination="platform=macOS,arch=arm64,name=My Mac"
      #     else
      #       scheme=GitHubActionsTests
      #       destination="platform=iOS Simulator,name=$device,OS=${{ matrix.os }}"
      #     fi
      #     xcodebuild -workspace GitHubActions.xcworkspace \
      #                -scheme $scheme \
      #                -destination "$destination" \
      #                -resultBundlePath ${{ env.xcresult_path }} \
      #                -clonedSourcePackagesDirPath ~/SourcePackages \
      #                -skipMacroValidation \
      #                test
      # - name: Write test result
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const fs = require('fs')
      #       const path = require('path')
      #       fs.writeFileSync(path.join(process.env.HOME, "${{ env.result_file_name }}"), "${{ steps.ut.outcome }}")
      # - name: Upload test result
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: result-${{ matrix.os }}
      #     path: ~/${{ env.result_file_name }}
      # - name: Upload xcresult
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: Lancers-${{ matrix.os }}-${{ github.run_number }}.xcresult
      #     path: ${{ env.xcresult_path }}
  completed:
    runs-on: ubuntu-latest
    if: success() || failure()
    needs: [setup, lint, ut]
    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: ~/results
          pattern: result-*
      - name: Completed
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const path = require('path')
            
            var conclusion = true
            const results = path.resolve(process.env.HOME, 'results')
            for (const artifact of fs.readdirSync(results)) {
              const result = fs.readFileSync(path.join(results, artifact, 'result.txt'))
              conclusion &&= (result == 'success')
            }

            conclusion &&= ${{ needs.lint.result == 'success' }}

            github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ needs.setup.outputs.check_run_id }},
              status: 'completed',
              conclusion: conclusion ? 'success' : 'failure'
            })
    