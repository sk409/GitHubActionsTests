name: Review
on: pull_request
jobs:
  setup:
    # if: contains(github.event.comment.html_url, '/pull/') && 
    #     github.event.comment.body == '/review'
    runs-on: ubuntu-latest
    outputs:
      base_branch: ${{ steps.base-branch.outputs.base_branch }}
      topic_branch: ${{ steps.topic-branch.outputs.topic_branch }}
      check_run_id: ${{ steps.check-run.outputs.result }}
    steps:
      - name: Notify
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "自動レビューを開始しました。\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            })
      - name: Fetch topic branch
        id: topic-branch
        run: |
          # topic_branch=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ github.event.issue.pull_request.url }} | jq -r ".head.ref")
          # echo "topic_branch=$topic_branch" >> $GITHUB_OUTPUT
          echo "topic_branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
      - name: Fetch base branch
        id: base-branch
        run: |
          # base_branch=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ github.event.issue.pull_request.url }} | jq -r ".base.ref")
          # echo "base_branch=$base_branch" >> $GITHUB_OUTPUT
          echo "base_branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
      - name: Fetch check run id
        id: check-run
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const list = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "${{ steps.topic-branch.outputs.topic_branch }}",
              check_name: "review",
              filter: "latest"
            });
            const checkRunID = list.data.check_runs[0].id;
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: checkRunID,
              status: "in_progress"
            })
            return checkRunID
  skip_review:
    runs-on: ubuntu-latest
    needs: [setup]
    outputs:
      skipped: ${{ steps.skip.outputs.result }}
    steps:
      - name: Skip
        id: skip
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            if ("${{ needs.setup.outputs.base_branch }}" == 'master' && "${{ needs.setup.outputs.topic_branch }}".startsWith("combined/")) {
              await github.rest.checks.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                check_run_id: ${{ needs.setup.outputs.check_run_id }},
                status: "completed",
                conclusion: "success"
              })
              return 'true'
            } else {
              return 'false'
            }
  lint:
    if: ${{ needs.skip_review.outputs.skipped == 'false' }}
    runs-on: macos-14
    needs: [setup, skip_review]
    steps:
      - name: Install swift-format
        run: brew install swift-format
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.topic_branch }}
      - name: Fetch base branch
        run: git fetch origin ${{ needs.setup.outputs.base_branch }}
      - name: Lint
        run: |
          files=$(git diff --name-only --diff-filter=d origin/${{ needs.setup.outputs.base_branch }}..${{ needs.setup.outputs.topic_branch }} | grep .swift$)
          if [[ ! -z "$files" ]]; then
            swift-format lint -s $files
          fi
  ut:
    runs-on: macos-14
    needs: [setup, lint]
    env:
      xcresult_path: ~/GitHubActionsTests.xcresult
    steps:
      - name: Delete Xcodes
        # Simulatorのインストールに使用するストレージを確保するため不要なXcodeを削除する。
        run: rm -rf /Applications/Xcode_16.1_beta.app /Applications/Xcode_14.3.1.app
      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer
      - name: Install iOS 15.0 simulators
        run: sudo xcodes runtimes install "iOS 15.0"
      - name: Install iOS 16.0 simulators
        run: sudo xcodes runtimes install "iOS 16.0"
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.topic_branch }}
      - name: Cache packages
        uses: actions/cache@v4
        with:
          path: ~/SourcePackages
          key: SPM-${{ hashFiles('GitHubActions.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
      - name: iOS15
        id: iOS15
        continue-on-error: true
        run: |
          while [ -z "$device" ]; do
            sleep 0.5
            device=$(xcrun simctl list -j devices | jq -r --arg os "iOS-15.0" '.devices | with_entries(select(.key | endswith($os)))[][0].name // empty' | tr -d "\n")
          done
          xcodebuild -workspace GitHubActions.xcworkspace \
                     -scheme iOS-Tests \
                     -destination platform=iOS Simulator,name=$device,OS=15.0 \
                     -resultBundlePath ${{ env.xcresult_path }}-iOS15.0 \
                     -clonedSourcePackagesDirPath ~/SourcePackages \
                     -testLanguage ja \
                     -skipMacroValidation \
                     -skipPackagePluginValidation \
                     test
      - name: Upload iOS 15.0 xcresult
        uses: actions/upload-artifact@v4
        with:
          name: GitHubActionsTests-iOS15.0-${{ github.run_number }}.xcresult
          path: ${{ env.xcresult_path }}-iOS15.0
          retention-days: 1
      - name: iOS16
        id: iOS16
        continue-on-error: true
        run: |
          while [ -z "$device" ]; do
            sleep 0.5
            device=$(xcrun simctl list -j devices | jq -r --arg os "iOS-16.0" '.devices | with_entries(select(.key | endswith($os)))[][0].name // empty' | tr -d "\n")
          done
          xcodebuild -workspace GitHubActions.xcworkspace \
                     -scheme iOS-Tests \
                     -destination platform=iOS Simulator,name=$device,OS=16.0 \
                     -resultBundlePath ${{ env.xcresult_path }}-iOS16.0 \
                     -clonedSourcePackagesDirPath ~/SourcePackages \
                     -testLanguage ja \
                     -skipMacroValidation \
                     -skipPackagePluginValidation \
                     test
      - name: Upload iOS 16.0 xcresult
        uses: actions/upload-artifact@v4
        with:
          name: GitHubActionsTests-iOS16.0-${{ github.run_number }}.xcresult
          path: ${{ env.xcresult_path }}-iOS16.0
          retention-days: 1
      - name: iOS17
        id: iOS17
        continue-on-error: true
        run: |
          while [ -z "$device" ]; do
            sleep 0.5
            device=$(xcrun simctl list -j devices | jq -r --arg os "iOS-17.5" '.devices | with_entries(select(.key | endswith($os)))[][0].name // empty' | tr -d "\n")
          done
          xcodebuild -workspace GitHubActions.xcworkspace \
                     -scheme iOS-Tests \
                     -destination platform=iOS Simulator,name=$device,OS=17.5 \
                     -resultBundlePath ${{ env.xcresult_path }}-iOS17.5 \
                     -clonedSourcePackagesDirPath ~/SourcePackages \
                     -testLanguage ja \
                     -skipMacroValidation \
                     -skipPackagePluginValidation \
                     test
      - name: Upload iOS 17.5 xcresult
        uses: actions/upload-artifact@v4
        with:
          name: GitHubActionsTests-iOS17.5-${{ github.run_number }}.xcresult
          path: ${{ env.xcresult_path }}-iOS17.5
          retention-days: 1
      - name: macOS
        id: macOS
        continue-on-error: true
        run: |
          xcodebuild -workspace GitHubActions.xcworkspace \
                     -scheme Mac-Tests \
                     -destination "platform=macOS,arch=arm64,name=My Mac" \
                     -resultBundlePath ${{ env.xcresult_path }}-macOS \
                     -clonedSourcePackagesDirPath ~/SourcePackages \
                     -testLanguage ja \
                     -skipMacroValidation \
                     -skipPackagePluginValidation \
                     test
      - name: Upload macOS xcresult
        uses: actions/upload-artifact@v4
        with:
          name: GitHubActionsTests-macOS-${{ github.run_number }}.xcresult
          path: ${{ env.xcresult_path }}-macOS
          retention-days: 1
      - name: exit
        run: |
          if [ "${{ steps.ut.outcome }}" = "success" ]; then
            exit 0
          else
            exit 1
          fi
  completed:
    # コメントが/review以外の場合はスキップする
    if: success() || failure()
    runs-on: ubuntu-latest
    needs: [setup, lint, ut]
    steps:
      - name: Completed
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ needs.setup.outputs.check_run_id }},
              status: "completed",
              conclusion: ${{ needs.lint.result == 'success' }} && ${{ needs.ut.result == 'success' }} ? "success" : "failure"
            })
    
